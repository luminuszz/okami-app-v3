/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Okami API
 * The Okami rest api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateManySearchTokensDto,
	CreateSearchTokenDto,
	SearchTokenControllerListSearchTokensParams,
	SearchTokenHttp,
} from ".././models";
import { customInstance } from "../../lib/axios/index";
import type { ErrorType, BodyType } from "../../lib/axios/index";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const searchTokenControllerCreateSearchToken = (
	createSearchTokenDto: BodyType<CreateSearchTokenDto>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<void>(
		{
			url: `/search-token`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createSearchTokenDto,
			signal,
		},
		options,
	);
};

export const getSearchTokenControllerCreateSearchTokenMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>,
		TError,
		{ data: BodyType<CreateSearchTokenDto> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>,
	TError,
	{ data: BodyType<CreateSearchTokenDto> },
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>,
		{ data: BodyType<CreateSearchTokenDto> }
	> = (props) => {
		const { data } = props ?? {};

		return searchTokenControllerCreateSearchToken(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SearchTokenControllerCreateSearchTokenMutationResult = NonNullable<
	Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>
>;
export type SearchTokenControllerCreateSearchTokenMutationBody =
	BodyType<CreateSearchTokenDto>;
export type SearchTokenControllerCreateSearchTokenMutationError =
	ErrorType<unknown>;

export const useSearchTokenControllerCreateSearchToken = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>,
		TError,
		{ data: BodyType<CreateSearchTokenDto> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
	Awaited<ReturnType<typeof searchTokenControllerCreateSearchToken>>,
	TError,
	{ data: BodyType<CreateSearchTokenDto> },
	TContext
> => {
	const mutationOptions =
		getSearchTokenControllerCreateSearchTokenMutationOptions(options);

	return useMutation(mutationOptions);
};
export const searchTokenControllerListSearchTokens = (
	params: SearchTokenControllerListSearchTokensParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<SearchTokenHttp[]>(
		{ url: `/search-token`, method: "GET", params, signal },
		options,
	);
};

export const getSearchTokenControllerListSearchTokensQueryKey = (
	params: SearchTokenControllerListSearchTokensParams,
) => {
	return [`/search-token`, ...(params ? [params] : [])] as const;
};

export const getSearchTokenControllerListSearchTokensInfiniteQueryOptions = <
	TData = InfiniteData<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		SearchTokenControllerListSearchTokensParams["page"]
	>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData,
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				QueryKey,
				SearchTokenControllerListSearchTokensParams["page"]
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getSearchTokenControllerListSearchTokensQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		QueryKey,
		SearchTokenControllerListSearchTokensParams["page"]
	> = ({ signal, pageParam }) =>
		searchTokenControllerListSearchTokens(
			{ ...params, page: pageParam || params?.["page"] },
			requestOptions,
			signal,
		);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		TError,
		TData,
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		QueryKey,
		SearchTokenControllerListSearchTokensParams["page"]
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type SearchTokenControllerListSearchTokensInfiniteQueryResult =
	NonNullable<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>
	>;
export type SearchTokenControllerListSearchTokensInfiniteQueryError =
	ErrorType<unknown>;

export function useSearchTokenControllerListSearchTokensInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		SearchTokenControllerListSearchTokensParams["page"]
	>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData,
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				QueryKey,
				SearchTokenControllerListSearchTokensParams["page"]
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
					TError,
					TData,
					QueryKey
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useSearchTokenControllerListSearchTokensInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		SearchTokenControllerListSearchTokensParams["page"]
	>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData,
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				QueryKey,
				SearchTokenControllerListSearchTokensParams["page"]
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
					TError,
					TData,
					QueryKey
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useSearchTokenControllerListSearchTokensInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		SearchTokenControllerListSearchTokensParams["page"]
	>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData,
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				QueryKey,
				SearchTokenControllerListSearchTokensParams["page"]
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};

export function useSearchTokenControllerListSearchTokensInfinite<
	TData = InfiniteData<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		SearchTokenControllerListSearchTokensParams["page"]
	>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData,
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				QueryKey,
				SearchTokenControllerListSearchTokensParams["page"]
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
} {
	const queryOptions =
		getSearchTokenControllerListSearchTokensInfiniteQueryOptions(
			params,
			options,
		);

	const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getSearchTokenControllerListSearchTokensQueryOptions = <
	TData = Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getSearchTokenControllerListSearchTokensQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>
	> = ({ signal }) =>
		searchTokenControllerListSearchTokens(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type SearchTokenControllerListSearchTokensQueryResult = NonNullable<
	Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>
>;
export type SearchTokenControllerListSearchTokensQueryError =
	ErrorType<unknown>;

export function useSearchTokenControllerListSearchTokens<
	TData = Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
					TError,
					TData
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useSearchTokenControllerListSearchTokens<
	TData = Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
					TError,
					TData
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSearchTokenControllerListSearchTokens<
	TData = Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSearchTokenControllerListSearchTokens<
	TData = Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
	TError = ErrorType<unknown>,
>(
	params: SearchTokenControllerListSearchTokensParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchTokenControllerListSearchTokens>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getSearchTokenControllerListSearchTokensQueryOptions(
		params,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const searchTokenControllerCreateManySearchTokens = (
	createManySearchTokensDto: BodyType<CreateManySearchTokensDto>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<void>(
		{
			url: `/search-token/batch`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createManySearchTokensDto,
			signal,
		},
		options,
	);
};

export const getSearchTokenControllerCreateManySearchTokensMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>,
		TError,
		{ data: BodyType<CreateManySearchTokensDto> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>,
	TError,
	{ data: BodyType<CreateManySearchTokensDto> },
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>,
		{ data: BodyType<CreateManySearchTokensDto> }
	> = (props) => {
		const { data } = props ?? {};

		return searchTokenControllerCreateManySearchTokens(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SearchTokenControllerCreateManySearchTokensMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>
	>;
export type SearchTokenControllerCreateManySearchTokensMutationBody =
	BodyType<CreateManySearchTokensDto>;
export type SearchTokenControllerCreateManySearchTokensMutationError =
	ErrorType<unknown>;

export const useSearchTokenControllerCreateManySearchTokens = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>,
		TError,
		{ data: BodyType<CreateManySearchTokensDto> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
	Awaited<ReturnType<typeof searchTokenControllerCreateManySearchTokens>>,
	TError,
	{ data: BodyType<CreateManySearchTokensDto> },
	TContext
> => {
	const mutationOptions =
		getSearchTokenControllerCreateManySearchTokensMutationOptions(options);

	return useMutation(mutationOptions);
};
export const searchTokenControllerDeleteSearchToken = (
	id: string,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<void>(
		{ url: `/search-token/${id}`, method: "DELETE" },
		options,
	);
};

export const getSearchTokenControllerDeleteSearchTokenMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>,
		TError,
		{ id: string },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return searchTokenControllerDeleteSearchToken(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SearchTokenControllerDeleteSearchTokenMutationResult = NonNullable<
	Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>
>;

export type SearchTokenControllerDeleteSearchTokenMutationError =
	ErrorType<unknown>;

export const useSearchTokenControllerDeleteSearchToken = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>,
		TError,
		{ id: string },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
	Awaited<ReturnType<typeof searchTokenControllerDeleteSearchToken>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions =
		getSearchTokenControllerDeleteSearchTokenMutationOptions(options);

	return useMutation(mutationOptions);
};
