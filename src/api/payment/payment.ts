/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Okami API
 * The Okami rest api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { customInstance } from "../../lib/axios/index";
import type { ErrorType } from "../../lib/axios/index";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const paymentControllerCreateIntentPayment = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<void>(
		{ url: `/payment/checkout`, method: "POST", signal },
		options,
	);
};

export const getPaymentControllerCreateIntentPaymentMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>,
	TError,
	void,
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>,
		void
	> = () => {
		return paymentControllerCreateIntentPayment(requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentControllerCreateIntentPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>
>;

export type PaymentControllerCreateIntentPaymentMutationError =
	ErrorType<unknown>;

export const usePaymentControllerCreateIntentPayment = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentControllerCreateIntentPayment>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions =
		getPaymentControllerCreateIntentPaymentMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentControllerWebhook = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<void>(
		{ url: `/payment/webhook`, method: "POST", signal },
		options,
	);
};

export const getPaymentControllerWebhookMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentControllerWebhook>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentControllerWebhook>>,
	TError,
	void,
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentControllerWebhook>>,
		void
	> = () => {
		return paymentControllerWebhook(requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentControllerWebhookMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentControllerWebhook>>
>;

export type PaymentControllerWebhookMutationError = ErrorType<unknown>;

export const usePaymentControllerWebhook = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentControllerWebhook>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentControllerWebhook>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getPaymentControllerWebhookMutationOptions(options);

	return useMutation(mutationOptions);
};
